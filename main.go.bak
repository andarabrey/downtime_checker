package main

import (
	"database/sql"
	"fmt"
	"log"
	"time"

	"github.com/go-sql-driver/mysql"
)

type State struct {
	Atm_id     string
	State_date string
	State      string
}

func main() {

	// DB Connection Start	
	var db *sql.DB
	var st_date, st_date2 time.Time
	// location, _ := time.LoadLocation("Asia/Bangkok")

	cfg := mysql.Config{
		User:                 "appops",
		Passwd:               "J@l1n0ps123!",
		Net:                  "tcp",
		Addr:                 "10.133.5.64:6033",
		DBName:               "atm",
		AllowNativePasswords: true,
	}

	var err error
	db, err = sql.Open("mysql", cfg.FormatDSN())
	if err != nil {
		log.Fatal(err)
	}

	pingErr := db.Ping()
	if pingErr != nil {
		log.Fatal(pingErr)
	}
	fmt.Println("Connected!")
	// DB Connection End

	// Summary Workflow List Start
	var sts []State
	rows, err := db.Query("SELECT atm_id, DATE, state FROM history_state WHERE atm_id = 2000028 AND DATE_FORMAT(CONVERT_TZ(date,'+00:00','+07:00'), '%Y-%m-%d') = '2024-01-11' order by date asc")
	if err != nil {
		log.Fatal(err)
	}
	defer rows.Close()

	for rows.Next() {
		var st State
		if err := rows.Scan(&st.Atm_id, &st.State_date, &st.State); err != nil {
			log.Fatal(err)
		}
		sts = append(sts, st)
	}
	if err = rows.Err(); err != nil {
		log.Fatal(err)
	}
	// Summary Workflow List End

	// Working With Workflow Data Start
	states := sts

	// reformat date time to local jakarta time for all workflows start
	layoutFormat := "2006-01-02 15:04:05"
	var total, diff time.Duration
	total = 0
	for i := 0; i < len(states); i++ {

		// fmt.Println(st_date)
		if states[i].State == "6" {
			if states[i+1].State == "2" {
				fmt.Println("ATM ID      : ", states[i].Atm_id)
				fmt.Println("ATM Down at : ", states[i].State_date)
				fmt.Println("ATM Up at   : ", states[i+1].State_date)
				st_date, _ = time.Parse(layoutFormat, states[i].State_date)
				// st_date = st_date.In(location)

				st_date2, _ = time.Parse(layoutFormat, states[i+1].State_date)
				// st_date2 = st_date.In(location)

				diff = st_date2.Sub(st_date)
				// out := time.Time{}.Add(diff)
				total = total + diff
				// fmt.Println(out.Format("15:04:05"))
				// fmt.Println(total)
				fmt.Println("Downtime    : ", diff)
				fmt.Println("--------------------------")
			} else if states[i+2].State == "2" {

				fmt.Println("ATM ID      : ", states[i].Atm_id)
				fmt.Println("ATM Down at : ", states[i].State_date)
				fmt.Println("ATM Up at   : ", states[i+2].State_date)
				st_date, _ = time.Parse(layoutFormat, states[i].State_date)
				// st_date = st_date.In(location)

				st_date2, _ = time.Parse(layoutFormat, states[i+2].State_date)
				// st_date2 = st_date.In(location)

				diff = st_date2.Sub(st_date)
				// out := time.Time{}.Add(diff)
				total = total + diff
				// fmt.Println(out.Format("15:04:05"))
				// fmt.Println(total)
				fmt.Println("Downtime    : ", diff)
				fmt.Println("--------------------------")
			}
		}
	}
	fmt.Println("Total Down  : ", total)
	fmt.Println("--------------------------")

	date_only := states[0].State_date[0:10]
	fmt.Println(date_only, ";", states[0].Atm_id, ";", total)

	// reformat date time to local jakarta time for all workflows end
	// reformat date time to local jakarta time for all failed workflows end
	// Working With Workflow Data end

	// Send workflow data to template email start
	// var tmplFile = "template.html"
	// tmpl, err := template.New(tmplFile).ParseFiles(tmplFile)
	// if err != nil {
	// 	panic(err)
	// }

	// buf := new(bytes.Buffer)
	// if err = tmpl.Execute(buf, sts); err != nil {
	// 	fmt.Println(err)
	// }

	// result := buf.String()

	// fmt.Println(result)
	// Send workflow data to template email end
}
